diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalDescriptionProvider.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalDescriptionProvider.java
index b293e68d..9f4bd190 100644
--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalDescriptionProvider.java
+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalDescriptionProvider.java
@@ -716,6 +716,42 @@ public class CompletionProposalDescriptionProvider {
 		}
 	}
 
+	private void createLabelWithTypePattern(CompletionProposal proposal, CompletionItem item) {
+		char[] name = proposal.getCompletion();
+		String typeName = extractDeclaringTypeFQN(proposal);
+
+		StringBuilder buf = new StringBuilder();
+		buf.append(name);
+		item.setInsertText(buf.toString());
+
+		if (isCompletionItemLabelDetailsSupport()) {
+			setLabelDetails(item, String.valueOf(name), null, typeName);
+		} else {
+			item.setLabel(buf.toString());
+		}
+
+		char[] declaration = proposal.getDeclarationSignature();
+		StringBuilder detailBuf = new StringBuilder();
+		if (declaration != null) {
+			declaration = Signature.getSignatureSimpleName(declaration);
+			if (declaration.length > 0) {
+				if (proposal.getRequiredProposals() != null) {
+					String declaringType = extractDeclaringTypeFQN(proposal);
+					String qualifier = Signature.getQualifier(declaringType);
+					if (qualifier.length() > 0) {
+						detailBuf.append(qualifier);
+						detailBuf.append('.');
+					}
+				}
+				detailBuf.append(declaration);
+			}
+		}
+		if (detailBuf.length() > 0) {
+			detailBuf.append('.');
+		}
+		detailBuf.append(buf);
+		item.setDetail(detailBuf.toString());
+	}
 	/**
 	 * Updates the description fields of the item.
 	 *
@@ -788,6 +824,9 @@ public class CompletionProposalDescriptionProvider {
 			case CompletionProposal.LAMBDA_EXPRESSION:
 				createLabelWithLambdaExpression(proposal, item);
 				break;
+			case CompletionProposal.TYPE_PATTERN:
+				createLabelWithTypePattern(proposal, item);
+				break;
 			default:
 				JavaLanguageServerPlugin.logInfo(new String(proposal.getName()) + " is of type " + getProposal(proposal));
 				Assert.isTrue(false);
diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalRequestor.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalRequestor.java
index e58aa722..7d79b061 100644
--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalRequestor.java
+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/contentassist/CompletionProposalRequestor.java
@@ -529,6 +529,7 @@ public final class CompletionProposalRequestor extends CompletionRequestor {
 		case CompletionProposal.METHOD_NAME_REFERENCE:
 		case CompletionProposal.POTENTIAL_METHOD_DECLARATION:
 		case CompletionProposal.LAMBDA_EXPRESSION:
+		case CompletionProposal.TYPE_PATTERN:
 			return CompletionItemKind.Method;
 			//text
 		case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:
diff --git a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/CompletionHandler.java b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/CompletionHandler.java
index 9cdcc08b..8a48316e 100644
--- a/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/CompletionHandler.java
+++ b/org.eclipse.jdt.ls.core/src/org/eclipse/jdt/ls/core/internal/handlers/CompletionHandler.java
@@ -263,6 +263,7 @@ public class CompletionHandler{
 
 		collector.setAllowsRequiredProposals(CompletionProposal.TYPE_REF, CompletionProposal.TYPE_REF, true);
 		collector.setFavoriteReferences(getFavoriteStaticMembers());
+		collector.setIgnored(CompletionProposal.TYPE_PATTERN, false);
 
 		if (offset >-1 && !monitor.isCanceled()) {
 			IBuffer buffer = unit.getBuffer();
