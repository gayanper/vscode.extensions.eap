name: Build and Deploy

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      module:
        description: Choose a module
        required: true
        type: choice
        options:
          - "vscode-java"
          - "vscode-gradle"
          - "vscode-spotless-gradle"

      ignore_merge_conflicts:
        description: 'Ignore merge conflicts and continue'
        required: false
        type: boolean
        default: false

      use_javac_support:
        description: 'Use experimental javac branch'
        required: false
        type: boolean
        default: true

jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Setup Maven
        uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.9.0

      - name: Setup Node.js environment
        uses: actions/setup-node@v3.4.1
        with:
          node-version: v16.16.0

      - name: Setup Cloudsmith CLI
        run: |
            python -m pip install --upgrade pip
            pip install --upgrade cloudsmith-cli

      - name: Setup VSCode Packager
        run: npm install -g vsce

      - name: Configure Git
        run: |
          git config --global user.email "workflows@egithub.com"
          git config --global user.name "workflows@egithub.com"

      - name: Checkout modules
        run: ./scripts/checkout-modules.sh

      - name: Merge PRs
        id: merge_prs
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: ./scripts/merge-prs.sh ${{ github.event.inputs.ignore_merge_conflicts }}

      - name: Build jdt
        id: jdt
        env:
          USE_JAVAC_BRANCH: ${{ inputs.use_javac_support }}
        run: |
          ./scripts/build-jdt.sh
          ./scripts/patch-p2-repo.sh
        if: ${{ inputs.module == 'vscode-java' && steps.merge_prs.outcome == 'success' }}

      - name: Build vscode-java
        run: ./scripts/build-vscode-java.sh
        if: ${{ inputs.module == 'vscode-java' && steps.jdt.outcome == 'success' }}
      
      - name: Deploy vscode-java
        id: java_ls
        env: 
          CLOUDSMITH_API_KEY: ${{ secrets.PKG_API_KEY }}
        if: ${{ github.ref == 'refs/heads/main' && inputs.module == 'vscode-java' && steps.jdt.outcome == 'success' }}
        run: ./scripts/cs.upload.sh $(ls ./extensions/vscode-java/*.vsix)

      - name: Build vscode-java-debug
        id: java_debug
        run: ./scripts/build-vscode-java-debug.sh
        if: ${{ inputs.module == 'vscode-java' && steps.jdt.outcome == 'success' }}
      
      - name: Deploy vscode-java-debug
        env: 
          CLOUDSMITH_API_KEY: ${{ secrets.PKG_API_KEY }}
        if: ${{ github.ref == 'refs/heads/main' && inputs.module == 'vscode-java' && steps.jdt.outcome == 'success' }}
        run: ./scripts/cs.upload.sh $(ls ./extensions/vscode-java-debug/*.vsix)

      - name: Build vscode-java-test
        run: ./scripts/build-vscode-java-test.sh
        if: ${{ inputs.module == 'vscode-java' && steps.jdt.outcome == 'success' }}
      
      - name: Deploy vscode-java-test
        env: 
          CLOUDSMITH_API_KEY: ${{ secrets.PKG_API_KEY }}
        if: ${{ github.ref == 'refs/heads/main' && inputs.module == 'vscode-java' && steps.jdt.outcome == 'success' }}
        run: ./scripts/cs.upload.sh $(ls ./extensions/vscode-java-test/*.vsix)

      - name: Build vscode-gradle
        run: ./scripts/build-vscode-gradle.sh
        if: ${{ inputs.module == 'vscode-gradle' }}
      
      - name: Deploy vscode-gradle
        env: 
          CLOUDSMITH_API_KEY: ${{ secrets.PKG_API_KEY }}
        if: ${{ github.ref == 'refs/heads/main' && inputs.module == 'vscode-gradle' }}
        run: ./scripts/cs.upload.sh $(ls ./extensions/vscode-gradle/extension/*.vsix)

      - name: Build vscode-spotless-gradle
        run: ./scripts/build-vscode-spotless.sh
        if: ${{ inputs.module == 'vscode-spotless-gradle' }}
      
      - name: Deploy vscode-spotless-gradle
        env: 
          CLOUDSMITH_API_KEY: ${{ secrets.PKG_API_KEY }}
        if: ${{ github.ref == 'refs/heads/main' && inputs.module == 'vscode-spotless-gradle' }}
        run: ./scripts/cs.upload.sh $(ls ./extensions/vscode-spotless-gradle/*.vsix)

      - name: Cleaning Repo ${{ inputs.module }}
        env: 
          CLOUDSMITH_API_KEY: ${{ secrets.PKG_API_KEY }}
        if: success()
        run: ./scripts/cs.cleanup-packages.sh ${{ inputs.module }} 2